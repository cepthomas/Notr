%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Notr
# Generic parent scope of the file
scope: text.notr

# version: 2

# Specials need escape: [\^$.|?*+(){}

comment: |-
  Generally variables use underscore whereas contexts use hyphen - convention?

file_extensions:
  - ntr
  - notr

variables:
  # atx_heading: (?:[ ]{,3}[#]{1,6}(?:[ \t]|$))  # between 0 and 3 spaces, followed 1 to 6 hashes, followed by at least one space or tab or by end of the line
  # atx_heading_space: (?:(?=[ \t]+#+[ \t]*$)|[ \t]+|$) # consume spaces only if heading is not empty to ensure `atx_heading_end` can fully match closing hashes
  # atx_heading_end: (?:[ \t]+(#+))?[ \t]*($\n?) # \n is optional so ## is matched as end punctuation in new document (at eof)

  # html_entity: '&([a-zA-Z0-9]+|#\d+|#x\h+);'
  # skip_html_tags: (?:<[^>]+>)
  # escape: '\\[-`*_#+.!(){}\[\]\\>|~<]'

  backticks: |-
    (?x:
      (`{4})(?![\s`])(?:[^`]+(?=`)|(?!`{4})`+(?!`))+(`{4})(?!`)  # 4 backticks, followed by at least one non whitespace, non backtick character, followed by (less than 4 backticks, or at least one non backtick character) at least once, followed by exactly 4 backticks
    | (`{3})(?![\s`])(?:[^`]+(?=`)|(?!`{3})`+(?!`))+(`{3})(?!`)  # 3 backticks, followed by at least one non whitespace, non backtick character, followed by (less than 3 backticks, or at least one non backtick character) at least once, followed by exactly 3 backticks
    | (`{2})(?![\s`])(?:[^`]+(?=`)|(?!`{2})`+(?!`))+(`{2})(?!`)  # 2 backticks, followed by at least one non whitespace, non backtick character, followed by (less than 2 backticks, or at least one non backtick character) at least once, followed by exactly 2 backticks
    | (`{1})(?![\s`])(?:[^`]+(?=`)|(?!`{1})`+(?!`))+(`{1})(?!`)  # 1 backtick,  followed by at least one non whitespace, non backtick character, followed by (                          at least one non backtick character) at least once, followed by exactly 1 backtick
    )

  block_quote: (?:[ ]{,3}(>)[ ]?)                     # between 0 and 3 spaces, followed by a greater than sign, (followed by any character or the end of the line = "only care about optional space!")

  first_list_item: (?:[ ]{,3}(?:1[.)]|[*+-])\s)       # between 0 and 3 spaces, followed by either: at least one integer and a full stop or a parenthesis, or (a star, plus or dash), followed by whitespace
  list_item: (?:[ ]{,3}(?:\d{1,9}[.)]|[*+-])\s)       # between 0 and 3 spaces, followed by either: at least one integer and a full stop or a parenthesis, or (a star, plus or dash), followed by whitespace



# Like:
# - match: |-
#     (?x:
#         \s*                        # Leading whitespace
#         (\[)(\^[^]]*)(\])(:)       # Reference name
#         [ \t]*                     # Optional whitespace
#     )
#   captures:
#     1: punctuation.definition.constant.begin.markdown
#     2: entity.name.reference.link.markdown
#     3: punctuation.definition.constant.end.markdown
#     4: punctuation.separator.key-value.markdown



contexts:

  main:
    # - include: block-quotes
    # - include: list-blocks
    - include: simple-text
    - include: tables
    - include: atx-heading
    - include: links


    # test stuff
    # - match: 'ZZZZ'
    #   scope: invalid



#################### simple text formatting ###########################################

  simple-text:
    # - match: \b(\*[^*]+\*)\b
    - match: (^|\s)(\*[^*]+\*)(^|\s)
      captures:
        2: markup.bold

    - match: (^|\s)(/[^/]+/)($|\s)
      captures:
        2: markup.italic

    # - match: \b(_[^_]+_)\b
    - match: (^|\s)(_[^_]+_)(^|\s)
      captures:
        2: markup.underline

    # - match: (^|\s)\+[^\+]+\+(^|\s)
    # - match: \b(~[^~]+~)\b
    - match: (^|\s)(~[^~]+~)(^|\s)
      captures:
        2: markup.strikethrough
      # scope: markup.strikethrough

    # - match: (^|\s)~[^~]+~(^|\s)
    #   scope: notr.code

    # - match: (^|\s)=[^=]+=(^|\s)
    #   scope: notr.verbatim

    - match: (`{1})(?![\s`])(?:[^`]+(?=`)|(?!`{1})`+(?!`))+(`{1})(?!`)  # 1 backtick,  followed by at least one non whitespace, non backtick character, followed by (                          at least one non backtick character) at least once, followed by exactly 1 backtick    
      captures:
        2: markup.raw.inline.notr

    - match: (`{3})(?![\s`])(?:[^`]+(?=`)|(?!`{3})`+(?!`))+(`{3})(?!`) # 3 backticks, followed by at least one non whitespace, non backtick character, followed by (less than 3 backticks, or at least one non backtick character) at least once, followed by exactly 3 backticks
      captures:
        2: markup.raw.inline.notr


  #   | (`{3})(?![\s`])(?:[^`]+(?=`)|(?!`{3})`+(?!`))+(`{3})(?!`)  # 3 backticks, followed by at least one non whitespace, non backtick character, followed by (less than 3 backticks, or at least one non backtick character) at least once, followed by exactly 3 backticks
  #   | (`{1})(?![\s`])(?:[^`]+(?=`)|(?!`{1})`+(?!`))+(`{1})(?!`)  # 1 backtick,  followed by at least one non whitespace, non backtick character, followed by (                          at least one non backtick character) at least once, followed by exactly 1 backtick

  # block_quote: (?:[ ]{,3}(>)[ ]?)                     # between 0 and 3 spaces, followed by a greater than sign, (followed by any character or the end of the line = "only care about optional space!")
  # markup.quote.notr

#################### headings ###########################################

  atx-heading:
    - match: '^# +([^ ]+) *(.*)'
      scope: markup.heading.notr
      captures:
        1: markup.heading.content.notr
        2: markup.heading.tags.notr
    
    - match: '^## +([^ ]+) *(.*)'
      scope: markup.heading.notr
      captures:
        1: markup.heading.content.notr
        2: markup.heading.tags.notr

    - match: '^### +([^ ]+) *(.*)'
      scope: markup.heading.notr
      captures:
        1: markup.heading.content.notr
        2: markup.heading.tags.notr

    - match: '^#### +([^ ]+) *(.*)'
      scope: markup.heading.notr
      captures:
        1: markup.heading.content.notr
        2: markup.heading.tags.notr

    - match: '^##### +([^ ]+) *(.*)'
      scope: markup.heading.notr
      captures:
        1: markup.heading.content.notr
        2: markup.heading.tags.notr


  #################### tables ###########################################

  tables:
    - match: ^\|
      push: table-header

  table-header:
    - meta_scope: meta.table.header
    - match: \n
      set: table-body

  table-body:
    - meta_content_scope: meta.table
    - include: table-end

  table-end:
    # The table is broken at the first empty line, or beginning of another block-level structure
    - match: |-
          (?x)^
          (?= \s*$
          )
      pop: 1
          # |   {{atx_heading}}
          # |   {{block_quote}}


  #################### link - from Markdown syntax - TODO? ###########################################

  links:
    - match: (Z)
      scope: markup.strikethrough

  # link-inline:
  #   - match: \[(?={{balance_square_brackets}}?\]\()
  #     scope: punctuation.definition.link.begin.markdown
  #     push:
  #       - link-inline-metadata
  #       - link-inline-text


  #################### lists - from Markdown syntax - TODO ###########################################

  lists:
    - match: (Z)
      scope: markup.strikethrough

  # first_list_item: (?:[ ]{,3}(?:1[.)]|[*+-])\s)       # between 0 and 3 spaces, followed by either: at least one integer and a full stop or a parenthesis, or (a star, plus or dash), followed by whitespace
  # list_item: (?:[ ]{,3}(?:\d{1,9}[.)]|[*+-])\s)       # between 0 and 3 spaces, followed by either: at least one integer and a full stop or a parenthesis, or (a star, plus or dash), followed by whitespace


    # - match: ^(DocId)(\s+(\d\d\d|permanent|temp|seeother|gone))?\s+(.+?)\s+((.+?)($|\s))?
    #   captures:
    #     1: keyword.core.markdown
    #     2: entity.status.markdown
    #     3: string.path.markdown
    #     5: string.path.markdown


    # - match: ^([ ]{0,3})([*+-])( (\[[ xX]\]))?(?=\s)
    #   captures:
    #     1: markup.list.unnumbered.markdown
    #     2: markup.list.unnumbered.bullet.markdown punctuation.definition.list_item.markdown
    #     3: markup.list.unnumbered.markdown
    #     4: constant.language.checkbox
    #   push:
    #     - meta_content_scope: markup.list.unnumbered.markdown
    #     - match: ^(?=\S)
    #       pop: true
    #     - include: list-paragraph

    # - match: ^([ ]{0,3})(\d+([.)]))(?=\s)
    #   captures:
    #     1: markup.list.numbered.markdown
    #     2: markup.list.numbered.bullet.markdown
    #     3: punctuation.definition.list_item.markdown
    #   push:
    #     - meta_content_scope: markup.list.numbered.markdown
    #     - match: ^(?=\S)
    #       pop: true
    #     - include: list-paragraph


