%YAML 1.2
---
# http://www.sublimetext.com/docs/syntax.html. Should make a syntax_test_notr.ntr.

name: Notr
scope: text.notr
# version: 2

comment: |-
  Generally variables use underscore whereas contexts use hyphen - convention?

file_extensions:
  - ntr

contexts:
  main:
    - include: section-heading
    - include: simple-text
    - include: table
    - include: link
    - include: list
    - include: raw
    - include: directive


  #################### simple text formatting ###########################################

  simple-text:
    - match: '(?:^|\s)(\*[^\*]+\*)(?:[\s,.:;-])'
      scope: markup.bold

    - match: '(?:^|\s)(/[^/]+/)(?:[\s,.:;-])'
      scope: markup.italic

    - match: '(?:^|\s)(_[^_]+_)(?:[\s,.:;-])'
      scope: markup.underline

    - match: '(?:^|\s)(~[^~]+~)(?:[\s,.:;-])'
      scope: markup.strikethrough

    - match: '^(?:[-=\+IXx]{5,}.*)$'
      scope: markup.hrule.notr


  #################### section ###########################################

  # section also used by Fold.tmPreferences

  section-heading:
    - match: '^(#+ +[^\[]+) *(?:\[(.*)\])?\n'
      scope: markup.heading.notr
      captures:
        1: markup.heading.content.notr
        2: markup.heading.tags.notr


  #################### raw ###########################################

  # raw is a catchall for inline text markup, comments, quotes, etc.
  # `raw text inline` => markup.raw.inline.notr
  # ``` text block => markup.raw.block.notr
  # ```
  # > quote or comment text => markup.quote.notr (not exactly raw but close enough)
  # quote and block also used by Comments.tmPreferences and Fold.tmPreferences

  raw:
    - match: '(`[^`]+`)'
      scope: markup.raw.inline.notr

    - match: '^( *> +)(.*)'
      scope: markup.quote.notr

    - match: '^(```)'
      scope: punctuation.definition.block.begin.notr
      push:
        - meta_scope: markup.raw.block.notr
        - match: '^(```)'
          scope: punctuation.definition.block.end.notr
          pop: true


  #################### table ###########################################

  table:
    - match: '^\|'
      push: table-header

  table-header:
    - meta_scope: meta.table.header
    - match: '\n'
      set: table-body

  table-body:
    - meta_content_scope: meta.table
    - include: table-end

  table-end:
    - match: '(?x)^(?= \s*$)'
      pop: 1


  #################### list ###########################################

  list:
    - match: '^([ ]*)([-])[ ]+'
      captures:
        1: markup.list.indent.notr
        2: markup.list.marker.dash.notr
      push: list-content

    - match: '^([ ]*)([+])[ ]+'
      captures:
        1: markup.list.indent.notr
        2: markup.list.marker.plus.notr
      push: list-content

    - match: '^([ ]*)([X])[ ]+'
      captures:
        1: markup.list.indent.notr
        2: markup.list.marker.x.notr
      push: list-content

    - match: '^([ ]*)([\?])[ ]+'
      captures:
        1: markup.list.indent.notr
        2: markup.list.marker.question.notr
      push: list-content

    - match: '^([ ]*)([!])[ ]+'
      captures:
        1: markup.list.indent.notr
        2: markup.list.marker.exclmation.notr
      push: list-content


  list-content:
    - include: simple-text
    - include: link
    - match: '\n'
      pop: 1


  #################### link ###########################################

  link:
    # link def [abc](https://www.abc.com)[tag1 tag2] or [look](Z:mypath\myfile.txt).
    - match: '\[(.*)\]\(([^\)]*)\)'
      captures:
        1: markup.link.name.notr
        2: markup.link.target.notr
        3: markup.link.tags.notr

    # ref to a link  [*linux-install#Install stuff] or [*abc] or [*look]
    - match: '\[\* *([^\]]*)\]'
      captures:
        1: markup.link.refname.notr


  #################### directive #######################################

  directive:
    # directive or alias
    - match: '^\:(.*)\n'
      captures:
        1: markup.directive.notr
